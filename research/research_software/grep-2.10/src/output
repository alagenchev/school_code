./searchutils.c:      for (i = 0; i < NCHAR; ++i)
./kwset.c:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
./kwset.c:      for (i = 0; i < kwset->mind; ++i)
./kwset.c:      for (i = kwset->mind - 2; i >= 0; --i)
./kwset.c:      for (curr = last = kwset->trie; curr; curr = curr->next)
./kwset.c:          for (fail = curr->fail; fail; fail = fail->fail)
./kwset.c:      for (curr = kwset->trie->next; curr; curr = curr->next)
./kwset.c:      for (i = 0; i < NCHAR; ++i)
./kwset.c:        for (i = 0; i < NCHAR; ++i)
./kwset.c:    for (i = 0; i < NCHAR; ++i)
./kwset.c:    for (ep = text + size - 11 * len;;)
./kwset.c:            for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
./kwset.c:          for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
./kwsearch.c:      for (lim = beg;; ++lim)
./kwsearch.c:  for (mb_start = beg = start_ptr ? start_ptr : buf; beg <= buf + size; beg++)
./kwsearch.c:        for (try = beg; ; )
./kwsearch.c:          } /* for (try) */
./kwsearch.c:    } /* for (beg in buf) */
./dfasearch.c:      for (; dm; dm = dm->next)
./dfasearch.c:      for (dm = dfamusts (dfa); dm; dm = dm->next)
./dfasearch.c:  for (beg = end = buf; end < buflim; beg = end)
./dfasearch.c:      for (i = 0; i < pcount; i++)
./dfasearch.c:    } /* for (beg = end ..) */
./pcresearch.c:  for (p = pattern; (pnul = memchr (p, '\0', patlim - p)); p = pnul + 1)
./pcresearch.c:      for (p = pnul; pattern < p && p[-1] == '\\'; p--)
./pcresearch.c:  for (line_next = buf;
./main.c:      for (newsize = bufalloc - pagesize - 1; newsize < minsize; newsize *= 2)
./main.c:  for (beg = lastnl; beg < lim; beg++)
./main.c:      for (i = 0; i < out_before; ++i)
./main.c:      for (n = 0; p < lim && n < outleft; n++)
./main.c:  for (line_next = buf; line_next < buf + size; )
./main.c:  for (;;)
./main.c:      for (lim = buflim; lim[-1] != eol; lim--)
./main.c:    for (ancestor = stats;  (ancestor = ancestor->parent) != 0;  )
./main.c:      for (i = 0; matchers[i].name; i++)
./main.c:  for (;;)
./main.c:  for (;;)
./main.c:        for (cap = color_dict; cap->name; cap++)
./main.c:        for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= 2)
./dfa.c:  for (i = 0; i < CHARCLASS_INTS; ++i)
./dfa.c:  for (i = 0; i < dfa->cindex; ++i)
./dfa.c:  for (i = 0; prednames[i].name; ++i)
./dfa.c:              for (;;)
./dfa.c:                  for (c2 = 0; c2 < NOTCHAR; ++c2)
./dfa.c:                for (c = c1; c <= c2; c++)
./dfa.c:                  for (c = 0; c < NOTCHAR; ++c)
./dfa.c:  for (i = 0; i < 2; ++i)
./dfa.c:              for (;  p != lim && ISASCIIDIGIT (*p);  p++)
./dfa.c:              for (;;)
./dfa.c:                  for (;;)
./dfa.c:          for (c2 = 0; c2 < NOTCHAR; ++c2)
./dfa.c:          for (c2 = 0; c2 < NOTCHAR; ++c2)
./dfa.c:          for (i = 0; i < work_mbc->nchars; i++)
./dfa.c:  for (i = 1; i < cur_mb_len; i++)
./dfa.c:    for (i = 0; i < n; i++)
./dfa.c:  for (i = 1; i < n; i++)
./dfa.c:  for (i = 0; i < ntokens; ++i)
./dfa.c:        for (i = 1; i < minrep; ++i)
./dfa.c:        for (; i < maxrep; ++i)
./dfa.c:      for (i = count; i > lo; i--)
./dfa.c:  for (i = 0; i < s->nelem; ++i)
./dfa.c:    for (--s->nelem; i < s->nelem; ++i)
./dfa.c:  for (i = 0; i < s->nelem; ++i)
./dfa.c:  for (i = 0; i < d->sindex; ++i)
./dfa.c:      for (j = 0; j < s->nelem; ++j)
./dfa.c:  for (j = 0; j < s->nelem; ++j)
./dfa.c:  for (i = 0; i < s->nelem; ++i)
./dfa.c:        for (j = 0; j < d->follows[old.index].nelem; ++j)
./dfa.c:  for (i = 0; i < d->tindex; ++i)
./dfa.c:  for (i = 0; i < d->tindex; ++i)
./dfa.c:        for (j = 0; j < nlastpos[-1]; ++j)
./dfa.c:        for (j = 0; j < nlastpos[-2]; ++j)
./dfa.c:            for (j = nlastpos[-1] - 1; j >= 0; --j)
./dfa.c:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
./dfa.c:      for (j = nlastpos[-1] - 1; j >= 0; --j)
./dfa.c:  for (i = 0; i < d->tindex; ++i)
./dfa.c:        for (j = d->follows[i].nelem - 1; j >= 0; --j)
./dfa.c:  for (i = 0; i < nfirstpos[-1]; ++i)
./dfa.c:  for (i = 0; i < merged.nelem; ++i)
./dfa.c:      for (i = 0; i < NOTCHAR; ++i)
./dfa.c:  for (i = 0; i < d->states[s].elems.nelem; ++i)
./dfa.c:            for (j = 0; j < CHARCLASS_INTS; ++j)
./dfa.c:            for (j = 0; j < CHARCLASS_INTS; ++j)
./dfa.c:            for (j = 0; j < CHARCLASS_INTS; ++j)
./dfa.c:          for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
./dfa.c:      for (j = 0; j < ngrps; ++j)
./dfa.c:          for (k = 0; k < CHARCLASS_INTS; ++k)
./dfa.c:          for (k = 0; k < CHARCLASS_INTS; ++k)
./dfa.c:      for (i = 0; i < d->states[0].elems.nelem; ++i)
./dfa.c:      for (i = 0; i < NOTCHAR; ++i)
./dfa.c:    for (i = 0; i < NOTCHAR; ++i)
./dfa.c:  for (i = 0; i < ngrps; ++i)
./dfa.c:      for (j = 0; j < grps[i].nelem; ++j)
./dfa.c:        for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
./dfa.c:          for (j = 0; j < follows.nelem; ++j)
./dfa.c:        for (j = 0; j < d->states[0].elems.nelem; ++j)
./dfa.c:        for (j = 0; j < follows.nelem; ++j)
./dfa.c:      for (j = 0; j < CHARCLASS_INTS; ++j)
./dfa.c:        for (j = 0; j < follows.nelem; ++j)
./dfa.c:      for (j = 0; j < CHARCLASS_INTS; ++j)
./dfa.c:        for (k = 0; k < INTBITS; ++k)
./dfa.c:  for (i = 0; i < ngrps; ++i)
./dfa.c:      for (i = 0; i < d->tralloc; ++i)
./dfa.c:  for (i = 0; i < NOTCHAR; ++i)
./dfa.c:  for (i = 0; i<work_mbc->nch_classes; i++)
./dfa.c:  for (i = 0; i<work_mbc->nequivs; i++)
./dfa.c:  for (i = 0; i<work_mbc->ncoll_elems; i++)
./dfa.c:  for (i = 0; i<work_mbc->nranges; i++)
./dfa.c:  for (i = 0; i<work_mbc->nchars; i++)
./dfa.c:  for (i = 0; i < d->states[s].mbps.nelem; ++i)
./dfa.c:  for (i = 0; i < *mbclen; i++)
./dfa.c:  for (i = 0; i < d->states[s].mbps.nelem ; i++)
./dfa.c:        for (j = 0; j < d->follows[d->states[s].mbps.elems[i].index].nelem;
./dfa.c:      for (i = 0; i < nelem; i++)
./dfa.c:      for (i = 0; i < nelem ; i++)
./dfa.c:            for (j = 0;
./dfa.c:  for (i = 0; i < end - begin + 1; i++)
./dfa.c:      for (i = 0; i < NOTCHAR; ++i)
./dfa.c:  for (;;)
./dfa.c:  for (i = 0; i < d->nmbcsets; ++i)
./dfa.c:      for (j = 0; j < p->nequivs; ++j)
./dfa.c:      for (j = 0; j < p->ncoll_elems; ++j)
./dfa.c:  for (i = 0; i < d->tindex; ++i)
./dfa.c:  for (i = 0; i < d->sindex; ++i) {
./dfa.c:  for (i = 0; i < d->tindex; ++i)
./dfa.c:  for (i = 0; i < d->tralloc; ++i)
./dfa.c:  for (dm = d->musts; dm; dm = ndm)
./dfa.c:  for (cp = lookin; *cp != '\0'; ++cp)
./dfa.c:  for (i = 0; cpp[i] != NULL; ++i)
./dfa.c:  for (i = 0; cpp[i] != NULL; ++i)
./dfa.c:  for (lcp = left; *lcp != '\0'; ++lcp)
./dfa.c:          for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
./dfa.c:  for (i = 0; new[i] != NULL; ++i)
./dfa.c:  for (lnum = 0; left[lnum] != NULL; ++lnum)
./dfa.c:      for (rnum = 0; right[rnum] != NULL; ++rnum)
./dfa.c:  for (i = 0; i <= d->tindex; ++i)
./dfa.c:  for (i = 0; i <= d->tindex; ++i)
./dfa.c:  for (i = 0; i < d->tindex; ++i)
./dfa.c:  for (ri = 0; ri < d->tindex; ++ri)
./dfa.c:            for (i = 0; i < n; ++i)
./dfa.c:            for (j = 0; j < i; ++j)
./dfa.c:          for (i = 0; musts[0].in[i] != NULL; ++i)
./dfa.c:      for (i = 0; mp->in[i]; ++i)
./dfa.c:  for (i = 0; i <= d->tindex; ++i)
